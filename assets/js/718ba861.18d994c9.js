"use strict";(self.webpackChunkskip_docs=self.webpackChunkskip_docs||[]).push([[785],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),k=p(n),m=a,u=k["".concat(o,".").concat(m)]||k[m]||d[m]||i;return n?r.createElement(u,l(l({ref:t},g),{},{components:n})):r.createElement(u,l({ref:t},g))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9887:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return g},default:function(){return k}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],s={sidebar_position:2},o="GitLab-byggel\xf8yper",p={unversionedId:"getting-started/gitlab-builds",id:"getting-started/gitlab-builds",isDocsHomePage:!1,title:"GitLab-byggel\xf8yper",description:"Generelt",source:"@site/docs/getting-started/gitlab-builds.md",sourceDirName:"getting-started",slug:"/getting-started/gitlab-builds",permalink:"/docs/getting-started/gitlab-builds",editUrl:"https://github.com/kartverket/skip-docs/edit/main/docs/getting-started/gitlab-builds.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Deploye til Kubernetes",permalink:"/docs/getting-started/deploy-to-kubernetes"},next:{title:"Grunnleggende BotKube-kommandoer",permalink:"/docs/getting-started/basic-botkube-commands"}},g=[{value:"Generelt",id:"generelt",children:[{value:"Variabler",id:"variabler",children:[]},{value:"Mellomlagring, caching og artefakter",id:"mellomlagring-caching-og-artefakter",children:[]},{value:"Images",id:"images",children:[]},{value:"Templates",id:"templates",children:[]}]},{value:"Bygging/testing",id:"byggingtesting",children:[]},{value:"Publisering",id:"publisering",children:[]},{value:"Release",id:"release",children:[]},{value:"Komplett l\xf8ype",id:"komplett-l\xf8ype",children:[]}],d={toc:g};function k(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"gitlab-byggel\xf8yper"},"GitLab-byggel\xf8yper"),(0,i.kt)("h2",{id:"generelt"},"Generelt"),(0,i.kt)("p",null,"GitLab-byggel\xf8yper opprettes ved \xe5 legge til en fil med navn .gitlab-ci.yml (NB!\nmerk innledende punktum) i prosjektets rotkatalog."),(0,i.kt)("p",null,"Dokumentasjon av syntaksen man bruker finnes her: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/"},"https://docs.gitlab.com/ee/ci/")),(0,i.kt)("p",null,"Denne siden tar for seg en migrasjonsprosess fra Jenkins-byggel\xf8yper og over\ni GitLab."),(0,i.kt)("p",null,"I motsetning til Jenkins er det bare 1 pipeline-fil per prosjekt. Denne filen\ninneholder definisjon p\xe5 alle jobber som skal kj\xf8res i prosjektet n\xe5r en fil\nsjekkes inn. Individuelle jobber kan settes opp til \xe5 kun kj\xf8res under gitte\nomstendigheter, til gitte tider, osv."),(0,i.kt)("p",null,'Hver pipeline deles inn i "Stages" og "Jobs". Hvert stage kan inneholde 1 eller\nflere jobber, men hver jobb kan bare inng\xe5 i 1 stage. Stages er blant annet\nnyttig for \xe5 holde styr p\xe5 parallellisering og sekvensielle jobber - alle jobber\ni en gitt stage kj\xf8rer parallellt, s\xe5 dersom man er avhengig av et sekvensielt\nbyggforl\xf8p (eks. build \u2192 test \u2192 publish \u2192 deploy), vil man typisk dele disse opp\ni 4 stages som kj\xf8res sekvensielt - men f.eks. test-stage kan parallelliseres\ndersom man har flere ulike testjobber, slik som sikkerhetsscanning, statisk\nanalyse osv.'),(0,i.kt)("p",null,"Rekkef\xf8lgen p\xe5 stages (og eventuelle ekstra stages utover de som GitLab har\ndefinert som standard - build, test, deploy) defineres slik i begynnelsen av\npipelinescriptet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n - build\n - test\n - publish\n")),(0,i.kt)("h3",{id:"variabler"},"Variabler"),(0,i.kt)("p",null,"Variabler(eksempelvis brukernavn/token til Harbor-registry, http proxy etc.) kan\nsettes som CI/CD-variabler, enten p\xe5 prosjektniv\xe5 eller gruppeniv\xe5. Variabler p\xe5\ngruppeniv\xe5 vil da v\xe6re tilgjengelige for alle prosjekter i gruppen."),(0,i.kt)("p",null,"Variabler kan ogs\xe5 gj\xf8res tilgjengelig for hele GitLab-instansen av\nadministratorer dersom dette skulle v\xe6re aktuelt."),(0,i.kt)("p",null,'Variabler kan settes opp til \xe5 maskeres i output, og ogs\xe5 settes opp til \xe5 kun\ndeles med "protected" branches dersom dette er \xf8nskelig.'),(0,i.kt)("p",null,'For \xe5 legge til en variabel, klikk "Settings" i menyen til h\xf8yre\ni GitLab-prosjektet eller gruppen du \xf8nsker, og velg "CI/CD". Trykk s\xe5 p\xe5\n"Expand" under Variables-seksjonen, og klikk p\xe5 "Add Variable".'),(0,i.kt)("h3",{id:"mellomlagring-caching-og-artefakter"},"Mellomlagring, caching og artefakter"),(0,i.kt)("p",null,"Man kan f\xe5 byggeforl\xf8pet til \xe5 g\xe5 raskere ved \xe5 gjenbruke pakker, artefakter\netc. p\xe5 tvers av jobber."),(0,i.kt)("p",null,'Dette kan oppn\xe5s ved hjelp av bruk av n\xf8kkelordene "cache" og "artifacts".'),(0,i.kt)("p",null,"Cache kan brukes for dependencies som lastes ned fra nettet - pakker,\nbiblioteker og den slags."),(0,i.kt)("p",null,"Artifacts kan brukes for \xe5 videresende midlertidige byggeartefakter (eks.\njar-filer) mellom stages."),(0,i.kt)("p",null,"Artifacts kan ogs\xe5 tilgjengeliggj\xf8res i etterkant dersom det er hensiktsmessing,\neksempelvis testrapporter som man jo \xf8nsker \xe5 kunne lese i etterkant av en\nfullf\xf8rt pipeline."),(0,i.kt)("p",null,"Les mer om forskjellen p\xe5 bruk av cache og artifacts, samt utvidet dokumentasjon\nher:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/caching/"},"https://docs.gitlab.com/ee/ci/caching/")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html"},"https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html")),(0,i.kt)("h3",{id:"images"},"Images"),(0,i.kt)("p",null,'GitLab bruker "runnere" for \xe5 kj\xf8re bygg. Disse tilsvarer Jenkins-byggenoder,\nmed en viktig forskjell: de spinnes opp i Kubernetes hver gang et bygg starter,\nog har ingenting forh\xe5ndsinstallert.'),(0,i.kt)("p",null,'N\xf8kkelordet "image:" brukes for \xe5 definere hva som skal v\xe6re tilgjengelig i en\nslik runner - dette er rett og slett docker-imaget man vil at runneren skal\nstartes med.'),(0,i.kt)("p",null,"Trenger man Gradle, npm osv. kan dette alts\xe5 l\xf8ses ved \xe5 bruke et image med\ndette forh\xe5ndsinstallert."),(0,i.kt)("h3",{id:"templates"},"Templates"),(0,i.kt)("p",null,"Templates er forh\xe5ndsdefinerte jobber/stages m.m. som man kan importere inn\ni pipelinescriptet sitt ved hjelp av et include-n\xf8kkelord i begynnelsen av fila."),(0,i.kt)("p",null,"Eksemplevis vil et template kalt SAST.gitlab-ci.yml v\xe6re noe vi \xf8nsker de fleste\npipelines tar med, det gjennomf\xf8rer bl.a. statisk sikkerhetstesting og scanning\nav kode."),(0,i.kt)("p",null,"Man kan lage sine egne templates for \xe5 samle felles funksjonalitet som flere\npipelines brukes p\xe5 samme sted, se\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/development/cicd/templates.html"},"https://docs.gitlab.com/ee/development/cicd/templates.html")," for artikler knyttet\ntil utvikling av egne templates."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Obs! Ved bruk av SAST-template m\xe5 du s\xf8rge for f\xf8lgende:")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Ved bruk av gradle-wrapper m\xe5 den v\xe6re merket som eksekverbar. Kj\xf8r kommandoen\ngit update-index --chmod=+x gradlew , commit og push."),(0,i.kt)("li",{parentName:"ul"},"Dersom prosjektet benytter en annen java-versjon enn 8, m\xe5 det settes en CI/CD\nvariabel p\xe5 prosjekt-eller gruppeniv\xe5 kalt SAST_JAVA_VERSION med verdi lik\njava-versjonen man bruker (eks. 11 hvis man bruker java 11).")))),(0,i.kt)("h2",{id:"byggingtesting"},"Bygging/testing"),(0,i.kt)("p",null,'Byggesteg foreg\xe5r ved hjelp av en eller flere bash-kommandoer under n\xf8kkelordet\n"script".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'script:\n  - echo "Dette er et enkelt byggescript"\n  - gradle assemble\n')),(0,i.kt)("p",null,"GitLabs standard er at bygging og testing foreg\xe5r i separate jobber - dette er\nimidlertid retningslinjer, ikke tvang, s\xe5 det kan tilpasses ut fra egne behov."),(0,i.kt)("h2",{id:"publisering"},"Publisering"),(0,i.kt)("p",null,"Publisering av Docker-images skal skje ved hjelp av Kaniko buildpack, dette for\n\xe5 unng\xe5 Docker-in-Docker p\xe5 GitLab-runnere med medf\xf8lgende privilegerte\ncontainere, som er en potensiell sikkerhetsrisiko."),(0,i.kt)("p",null,"For \xe5 publisere et Docker-image til Harbor (v\xe5rt foretrukne container-registry)\nm\xe5 man ha opprettet et prosjekt og en robot-bruker for prosjektet man kan logge\nseg inn med (se egen dokumentasjon for dette her)."),(0,i.kt)("p",null,"Robot-brukernavn og token legges s\xe5 inn som CI-variabler p\xe5 gruppeniv\xe5 som\nbeskrevet ovenfor i seksjonen om variabler. I eksempelet har vi brukt\nHARBOR_USERNAME og HARBOR_TOKEN som navn p\xe5 disse."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'publish:\n  stage: publish\n  image:\n    name: gcr.io/kaniko-project/executor:debug\n    entrypoint: [""]\n  script:\n    - mkdir -p /kaniko/.docker\n    - |-\n      KANIKOPROXYBUILDARGS=""\n      KANIKOCFG="{ \\"auths\\":{\\"$HARBOR_URL\\":{\\"username\\":\\"$HARBOR_USERNAME\\",\\"password\\":\\"$HARBOR_TOKEN\\"}}"\n      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then\n        KANIKOCFG="${KANIKOCFG}, \\"proxies\\": { \\"default\\": { \\"httpProxy\\": \\"${http_proxy}\\", \\"httpsProxy\\": \\"${https_proxy}\\", \\"noProxy\\": \\"${no_proxy}\\"}}"\n        KANIKOPROXYBUILDARGS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"\n      fi\n      KANIKOCFG="${KANIKOCFG} }"\n      echo "${KANIKOCFG}" > /kaniko/.docker/config.json\n    - cat /kaniko/.docker/config.json\n    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKOPROXYBUILDARGS --destination harbor.statkart.no/example/gitlab-demo:$CI_COMMIT_TAG\n\n  only:\n    refs:\n      - master\n  except:\n    - tags\n  dependencies:\n    - build\n')),(0,i.kt)("h2",{id:"release"},"Release"),(0,i.kt)("p",null,'GitLab har et konsept i forhold til kode som kalles "release". Dette er et\nsnapshot av all kode og andre relevante artefakter slik det s\xe5 ut ved tidspunkte\nreleasen ble opprettet. Den kan tenkes p\xe5 som en slags git tag med utvidede\nmuligheter for \xe5 inkludere dokumentasjon osv.'),(0,i.kt)("p",null,"Les mer her: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/releases/"},"https://docs.gitlab.com/ee/user/project/releases/")),(0,i.kt)("h2",{id:"komplett-l\xf8ype"},"Komplett l\xf8ype"),(0,i.kt)("p",null,"Eksempel p\xe5 en komplett pipeline som bygger, tester, publiserer og lager en\nrelease:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'include:\n  - template: Security/SAST.gitlab-ci.yml # for \xe5 f\xe5 med automatiske jobber for sikkerhetskontroll av kode osv.\n\n# Definer alle jobber som m\xe5 kj\xf8re sekvensielt her, ellers blir de kj\xf8rt i parallell\nstages:\n  - build\n  - test\n  - publish\n  - release\n\nvariables:\n  FF_GITLAB_REGISTRY_HELPER_IMAGE: 1\nbuild:\n  image: gradle:jdk11\n  variables:\n    GRADLE_OPTS: "-Dorg.gradle.daemon=false"\n  before_script:\n    - export GRADLE_USER_HOME=`pwd`/.gradle\n  stage: build\n  script:\n    - gradle assemble\n    - echo "PROJECT_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$CI_JOB_ID" > build.env # bruk build-jobbens unike id som utgangspunkt for patch-delen av semver-versjonstagg\n  cache:\n    key: "$CI_COMMIT_REF_NAME" # cache artefaktet som er bygd slik at vi kan bruke det til \xe5 kj\xf8re tester og eventuelt pakke inn i docker-image\n    policy: push\n    paths:\n      - build/\n      - .gradle/\n  artifacts:\n    paths:\n      - build/\n    reports:\n      dotenv: build.env # dette er for \xe5 kunne dele variabler mellom byggejobber, i dette tilfellet versjonsnummer\n  except:\n    - tags # ikke kj\xf8r denne jobben n\xe5r man sjekker inn en tag\n\n\ntest:\n  image: gradle:jdk11\n  variables:\n    GRADLE_OPTS: "-Dorg.gradle.daemon=false"\n  before_script:\n    - export GRADLE_USER_HOME=`pwd`/.gradle\n  stage: test\n  script:\n    - echo "This is where the testing is done"\n    - gradle test # eksempel-templaten bruker check istedenfor test, kan evt vurdere hva dette har \xe5 si\n  cache:\n    key: "$CI_COMMIT_REF_NAME" # hent ferdigbygd artefakt fra cache\n    policy: pull\n    paths:\n      - build/\n      - .gradle/\n  artifacts:\n    when: always\n    reports:\n      junit: build/test-results/test/**/TEST-*.xml #riktig filsti til testrapporten er viktig\n  except:\n    - tags\n\n\n\n\npublish:\n  stage: publish\n  image:\n    name: gcr.io/kaniko-project/executor:debug\n    entrypoint: [""]\n  script:\n    - mkdir -p /kaniko/.docker\n    - |-\n      KANIKOPROXYBUILDARGS=""\n      KANIKOCFG="{ \\"auths\\":{\\"$HARBOR_URL\\":{\\"username\\":\\"$HARBOR_USERNAME\\",\\"password\\":\\"$HARBOR_TOKEN\\"}}"\n      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then\n        KANIKOCFG="${KANIKOCFG}, \\"proxies\\": { \\"default\\": { \\"httpProxy\\": \\"${http_proxy}\\", \\"httpsProxy\\": \\"${https_proxy}\\", \\"noProxy\\": \\"${no_proxy}\\"}}"\n        KANIKOPROXYBUILDARGS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"\n      fi\n      KANIKOCFG="${KANIKOCFG} }"\n      echo "${KANIKOCFG}" > /kaniko/.docker/config.json\n    - cat /kaniko/.docker/config.json\n    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKOPROXYBUILDARGS --destination harbor.statkart.no/example/gitlab-demo:$CI_COMMIT_TAG\n\n  only:\n    refs:\n      - master\n  except:\n    - tags\n  dependencies:\n    - build\n\n\n\nrelease: # Lager en release som samler "evidence" (kildekode etc) p\xe5 ett sted og sjekker inn en git tag i koderepoet\n  image: registry.gitlab.com/gitlab-org/release-cli\n  stage: release\n  script:\n    - echo "Release stage"\n    - echo $PROJECT_VERSION\n  release:\n    tag_name: $PROJECT_VERSION\n    description: "Gitlab demo"\n  only:\n    refs:\n      - master\n  except:\n    - tags\n  dependencies:\n    - build\n')))}k.isMDXComponent=!0}}]);